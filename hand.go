package gophe

type Hand struct {
	size       uint8
	suitHash   int
	suitBinary [4]int
	quinary    [13]byte
}

var binariesByID = [52]uint16{
	0x1, 0x1, 0x1, 0x1,
	0x2, 0x2, 0x2, 0x2,
	0x4, 0x4, 0x4, 0x4,
	0x8, 0x8, 0x8, 0x8,
	0x10, 0x10, 0x10, 0x10,
	0x20, 0x20, 0x20, 0x20,
	0x40, 0x40, 0x40, 0x40,
	0x80, 0x80, 0x80, 0x80,
	0x100, 0x100, 0x100, 0x100,
	0x200, 0x200, 0x200, 0x200,
	0x400, 0x400, 0x400, 0x400,
	0x800, 0x800, 0x800, 0x800,
	0x1000, 0x1000, 0x1000, 0x1000,
}

var suitbitById = [52]uint16{
	0x1, 0x8, 0x40, 0x200,
	0x1, 0x8, 0x40, 0x200,
	0x1, 0x8, 0x40, 0x200,
	0x1, 0x8, 0x40, 0x200,
	0x1, 0x8, 0x40, 0x200,
	0x1, 0x8, 0x40, 0x200,
	0x1, 0x8, 0x40, 0x200,
	0x1, 0x8, 0x40, 0x200,
	0x1, 0x8, 0x40, 0x200,
	0x1, 0x8, 0x40, 0x200,
	0x1, 0x8, 0x40, 0x200,
	0x1, 0x8, 0x40, 0x200,
	0x1, 0x8, 0x40, 0x200,
}

func (h Hand) Size() uint8 { return h.size }

func (h Hand) getSuitHash() int { return h.suitHash }

func (h Hand) getSuitBinary() [4]int { return h.suitBinary }

func (h Hand) getQuinary() [13]byte { return h.quinary }

func (h Hand) AddCard(c Card) Hand {
	h.suitHash += int(suitbitById[c])
	h.suitBinary[c&0x3] |= int(binariesByID[c])
	h.quinary[c>>2]++
	h.size++
	return h
}

func (h *Hand) ModifyHand(cards ...Card) {
	for _, c := range cards {
		*h = (*h).AddCard(c)
	}
}

func (h Hand) AddCards(cards ...Card) Hand {
	for _, c := range cards {
		h = h.AddCard(c)
	}
	return h
}

func NewHand(cards ...Card) *Hand {
	h := &Hand{}
	h.ModifyHand(cards...)
	return h
}
